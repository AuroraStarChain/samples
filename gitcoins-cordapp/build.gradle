buildscript {
    ext {
        ext.corda_release_group = 'net.corda'
        ext.corda_release_version = '5.0-SNAPSHOT'
        ext.corda_gradle_plugins_version = '4.0.44'
        ext.kotlin_version = '1.2.71'
        ext.junit_version = '4.12'
        ext.quasar_version = '0.7.10'
        ext.spring_boot_version = '2.0.2.RELEASE'
        ext.spring_boot_gradle_plugin_version = '2.0.2.RELEASE'
        ext.slf4j_version = '1.7.25'
        ext.log4j_version = '2.11.2'
        ext.corda_platform_version = '4'
        tokens_sdk='com.r3.tokens-sdk'
        tokens_sdk_version='1.0-SNAPSHOT'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
    }
}

allprojects {
    apply plugin: 'kotlin'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-dev' }
//        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-tokens-dev' }
        maven { url 'https://repo.gradle.org/gradle/libs-releases-local' }
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = "1.8"
            javaParameters = true   // Useful for reflection.
        }
    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

dependencies {
    // Corda dependencies.
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // CorDapp dependencies.
    cordapp project(":workflows")
    cordapp project(":contracts")
    
    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"

    // Token SDK dependencies.
    cordapp "$tokens_sdk:contract:$tokens_sdk_version"
    cordapp "$tokens_sdk:workflow:$tokens_sdk_version"
    cordapp "$tokens_sdk:money:$tokens_sdk_version"
}

cordapp {
    info {
        name "GitCoin CorDapp"
        vendor "Corda Open Source"
        targetPlatformVersion corda_platform_version.toInteger()
        minimumPlatformVersion corda_platform_version.toInteger()
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp("$tokens_sdk:contract:$tokens_sdk_version")
        cordapp("$tokens_sdk:workflow:$tokens_sdk_version")
        cordapp("$tokens_sdk:money:$tokens_sdk_version")
        cordapp project(':contracts')
        cordapp project(':workflows')
    }

    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating : false]
        p2pPort 10002
        sshdPort 2222
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10043")
        }
    }

    node {
        name "O=PartyA,L=London,C=GB"
        p2pPort 10005
        sshdPort 2223
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
}


task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}